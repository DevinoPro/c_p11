//package p11test;
import java.io.IOException;

import org.bouncycastle.util.encoders.Hex;

import sun.security.pkcs11.wrapper.CK_MECHANISM;
import sun.security.pkcs11.wrapper.CK_TOKEN_INFO;
import sun.security.pkcs11.wrapper.PKCS11;
import sun.security.pkcs11.wrapper.PKCS11Constants;
import sun.security.pkcs11.wrapper.PKCS11Exception;




public class CMain {

    private static int SHA_DIGEST_SIZE             = 20; 
    private static int SIGN_KEY_ID_SIZE            = 4 ; 
    private static int RSANUMBYTES                 = 256 ; 

    private static final byte [] signKeyId =  "0506".getBytes(); // Not confirmed yet. 
    private static final byte [] padding   = hexStringToByteArray("0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff003021300906052b0e03021a05000414");
    
    private static       byte []    data            =  null ;   // For input IMEI value // 
    private static       String     ROOT_KEY_NAME   =  ""   ;
    private static       String     IMEI_KEY_NAME   =  ""   ; 


 


    private static String OS = System.getProperty("os.name").toLowerCase();

    public static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                    + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }
    
    public static boolean isWindows() {
        return (OS.indexOf("win") >= 0);
    }

    public static boolean isUnix() {
        return (OS.indexOf("nix") >= 0 || OS.indexOf("nux") >= 0 || OS.indexOf("aix") > 0 );
    }

    public static void main(String[] args){

        PKCS11 pkcs11 = null;
        long[] slotList = null;
        long hSlot, hSession, hPuK, hPrK; 
        hSlot=hSession=hPuK=hPrK = -1; 
        boolean isDebug = false; 
        
        // FOR REAL 
        //    INPUT VALUE : [0] : OCS PROTECTION VALUE  (Be sure that this value can not be printed!!!!)
        //    INPUT VALUE : [1] : IMEI VALUE 
        // FOR DEBUG 
        //    INPUT VALUE : [0] : DEBUG      // 1)TEST KEY uesed 2) Printing each step
        //    INPUT VALUE : [1] : IMEI VALUE 

        int INPUT_COUNT  = 2 ;  

        if (args.length != INPUT_COUNT  ){
            return ; // without any warring. 
        }
        if ( args[0].equals("DEBUG"))
        {
            isDebug = true; 

            ROOT_KEY_NAME   =  "test_root_imei_sign_key";
            IMEI_KEY_NAME   =  "test_imei_sign_key"     ; 

            for (int iii = 0 ; iii  < args.length ; iii++){
                System.out.println("input-" + iii +" ::" +  args[iii]  );
            }            
                       //TEMP 
            data =hexStringToByteArray("b1cc311c38d25d7cd3867a3b835de4090752170b"); // fixed IMEI value // <------------------------------//
            
        }else{
            {
                ROOT_KEY_NAME   =  ""     ;
                IMEI_KEY_NAME   =  ""     ; 
            }           
        }
        
        
		try {

            if(isDebug==false && isWindows()){
                System.out.println("windows");
                pkcs11 = PKCS11.getInstance("C:\\Program Files (x86)\\nCipher\\nfast\\toolkits\\pkcs11\\cknfast-64.dll", "C_GetFunctionList", null, false);
            }else if (isUnix()){
                System.out.println("unix or linux");
                pkcs11 = PKCS11.getInstance("/opt/nfast/toolkits/pkcs11/libcknfast.so", "C_GetFunctionList", null, false);
            }

			// Get Slot & Token Info
			slotList = pkcs11.C_GetSlotList(true);

            if(isDebug){
                hSlot = slotList[0];
                CK_TOKEN_INFO token = pkcs11.C_GetTokenInfo(hSlot);
                System.out.println("#############################################################");
                System.out.println("Information of Module:");
                System.out.println("Token Info: "+token.toString());
                System.out.println("#############################################################");
            }else
            {
                //OCS Protection is needed //

            }

			// Open Session
			hSession = pkcs11.C_OpenSession(hSlot, PKCS11Constants.CKF_RW_SESSION | PKCS11Constants.CKF_SERIAL_SESSION, null, null);

            /*
            {
            // NO NEED to create key 
            System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~CREATE KEY");
            // Generate RSA Keypair		
            P11RSAKeyPair rsaKeypair = new P11RSAKeyPair(pkcs11, hSession);
            hPuK = rsaKeypair.hPuK;
            hPrK = rsaKeypair.hPrK;

            System.out.println("Public Key Handle: " + hPuK);
            System.out.println("Private Key Handle: " + hPrK);
            System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~CREATE KEY END");

            }
             */
            
            //FIND Key in HSM  and Sign IMEI with it//
            {
                if(isDebug) System.out.println("FIND KEY AND SIGN");
                // Find RSA Keypair

                // PKCS RSA Signing // Not used//
                //      byte[] msg = "testing mesg".getBytes();
                //      byte[] sig;
                //      CK_MECHANISM signMech = new CK_MECHANISM();
                //      signMech.mechanism = PKCS11Constants.CKM_RSA_PKCS;
                //      pkcs11.C_SignInit(hSession, signMech, hPrK);
                //      sig = pkcs11.C_Sign(hSession, msg);
                //      System.out.println("PKCS RSA Signature: " + Hex.toHexString(sig));
                //      pkcs11.C_VerifyInit(hSession, signMech, hPuK);
                //      pkcs11.C_Verify(hSession, msg, sig);
                //      System.out.println("PKCS RSA Verify OK");
                

                // RAW RSA Signing 
                byte[] sig2;
                byte[] ddata = new byte [RSANUMBYTES];

                System.arraycopy(padding , 0,  ddata, 0 , RSANUMBYTES - SHA_DIGEST_SIZE); 
                System.arraycopy(data , 0 ,ddata, RSANUMBYTES-SHA_DIGEST_SIZE  , SHA_DIGEST_SIZE) ; 
                
                // No need since Input IMEI is digest type. 
                //      CK_MECHANISM hashMech = new CK_MECHANISM();
                //      hashMech.mechanism = PKCS11Constants.CKM_SHA256;
                //      pkcs11.C_DigestSingle(hSession, hashMech, msg, 0, msg.length, digest, 0, digest.length);
                //      System.out.println("Message Digest: " + Hex.toHexString(digest));

                //For IMEI Sig  (data sig)
                sign (pkcs11 , hSession, ddata, IMEI_KEY_NAME , isDebug);


                       



            }
			
			// Finalize
			pkcs11.C_CloseSession(hSession);
			pkcs11.C_Finalize(null);
			
			
		} catch (IOException | PKCS11Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


	}

        
    private static byte [] sign(PKCS11 pkcs11, long hSession, byte [] ddata , String keyName, boolean isDebug)
    {
        byte [] sig2 = null ; 
        P11RSAKeyPair rsaKeypair = new P11RSAKeyPair(pkcs11, hSession, keyName);
        long hPuK = rsaKeypair.hPuK;
        long hPrK = rsaKeypair.hPrK;
        if(isDebug) System.out.println("Public Key Handle: " + hPuK);
        if(isDebug) System.out.println("Private Key Handle: " + hPrK);

        try {

            CK_MECHANISM rawRSASignMech = new CK_MECHANISM();
            rawRSASignMech.mechanism = PKCS11Constants.CKM_RSA_X_509;
            pkcs11.C_SignInit(hSession, rawRSASignMech, hPrK);
            sig2 = pkcs11.C_Sign(hSession, ddata);
            if(isDebug) System.out.println("RAW RSA Signature: " + Hex.toHexString(sig2));

            pkcs11.C_VerifyInit(hSession, rawRSASignMech, hPuK);
            pkcs11.C_Verify(hSession, ddata, sig2);
            if(isDebug) System.out.println("RAW RSA Verify OK");

        }catch (PKCS11Exception e){
            if(isDebug) System.out.println("failed!");
            sig2 = null; 

        }
        
        
        return sig2; 
    }


}
